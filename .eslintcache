[{"/var/www/html/Dev/G2PDeep_Frontend/src/index.js":"1","/var/www/html/Dev/G2PDeep_Frontend/src/App.js":"2","/var/www/html/Dev/G2PDeep_Frontend/src/reportWebVitals.js":"3","/var/www/html/Dev/G2PDeep_Frontend/src/components/Navigator/Navigator.js":"4","/var/www/html/Dev/G2PDeep_Frontend/src/components/Header/Header.js":"5","/var/www/html/Dev/G2PDeep_Frontend/src/components/Footer/Footer.js":"6","/var/www/html/Dev/G2PDeep_Frontend/src/containers/Prediction/Prediction.js":"7","/var/www/html/Dev/G2PDeep_Frontend/src/containers/Datasets/Datasets.js":"8","/var/www/html/Dev/G2PDeep_Frontend/src/containers/Expriments/Expriments.js":"9","/var/www/html/Dev/G2PDeep_Frontend/src/components/InputData/InputData.js":"10","/var/www/html/Dev/G2PDeep_Frontend/src/components/Result/Result.js":"11","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetCreate/DatasetCreate.js":"12","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetSummary/DatasetSummary.js":"13","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetDetails/DatasetDetails.js":"14","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentCreate/ExperimentCreate.js":"15","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentSummary/ExperimentSummary.js":"16","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentCompare/ExperimentCompare.js":"17","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentDetail/ExperimentDetail.js":"18"},{"size":602,"mtime":1608492816163,"results":"19","hashOfConfig":"20"},{"size":1833,"mtime":1608467493269,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1608454660480,"results":"22","hashOfConfig":"20"},{"size":2670,"mtime":1608467476158,"results":"23","hashOfConfig":"20"},{"size":725,"mtime":1608454660478,"results":"24","hashOfConfig":"20"},{"size":477,"mtime":1608454660478,"results":"25","hashOfConfig":"20"},{"size":1621,"mtime":1608454660480,"results":"26","hashOfConfig":"20"},{"size":4400,"mtime":1608454660479,"results":"27","hashOfConfig":"20"},{"size":4735,"mtime":1608467467105,"results":"28","hashOfConfig":"20"},{"size":5231,"mtime":1608454660478,"results":"29","hashOfConfig":"20"},{"size":2958,"mtime":1608454660479,"results":"30","hashOfConfig":"20"},{"size":5263,"mtime":1608454660475,"results":"31","hashOfConfig":"20"},{"size":4035,"mtime":1608454660475,"results":"32","hashOfConfig":"20"},{"size":5184,"mtime":1608454660475,"results":"33","hashOfConfig":"20"},{"size":23900,"mtime":1608454660476,"results":"34","hashOfConfig":"20"},{"size":3802,"mtime":1608454660477,"results":"35","hashOfConfig":"20"},{"size":6776,"mtime":1608454660475,"results":"36","hashOfConfig":"20"},{"size":6260,"mtime":1608454660477,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jji1p6",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"/var/www/html/Dev/G2PDeep_Frontend/src/index.js",["85"],"/var/www/html/Dev/G2PDeep_Frontend/src/App.js",[],["86","87"],"/var/www/html/Dev/G2PDeep_Frontend/src/reportWebVitals.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/components/Navigator/Navigator.js",["88","89"],"import React, { Component } from 'react';\nimport Style from \"./navigator.module.css\";\nimport { Layout, Menu } from 'antd';\nimport { LaptopOutlined, FundOutlined, CloudOutlined } from '@ant-design/icons';\nimport { Link, NavLink } from 'react-router-dom';\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\n\nconst selectedStyle = {\n    color:'rgb(24, 144, 255)',\n}\n\nexport default class Navigator extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            currentMenu:''\n        }\n    }\n    handleClick = e => {\n        this.setState({\n            currentMenu:e.key,\n        })\n    };\n    render() {\n        let current\n        // console.log(this.match)\n        if (this.props.match !== undefined ) {\n            current = this.props.match.params.menu;\n        }else{\n            current = 'prediction'\n        }\n        return (\n            <Sider width={300}>\n                <Menu\n                onClick={this.handleClick}\n                mode=\"inline\"\n                // defaultSelectedKeys={['1']}\n                // defaultOpenKeys={['prediction']}\n                className={Style.menu}\n                selectedKeys = {['onther']}\n                >\n                <Menu.Item key=\"prediction\" icon={<LaptopOutlined />}><NavLink to=\"/prediction\" activeStyle = {selectedStyle}>Predition</NavLink></Menu.Item>\n                <SubMenu key=\"datasets\" icon={<CloudOutlined />} title=\"DateSets\">\n                    <Menu.Item key=\"summary\"><NavLink to=\"/datasets/summary\" activeStyle = {selectedStyle} >Summary</NavLink></Menu.Item>\n                    <Menu.Item key=\"details\"><NavLink to=\"/datasets/details\" activeStyle = {selectedStyle}>Details</NavLink></Menu.Item>\n                    <Menu.Item key=\"createDataset\"><NavLink to=\"/datasets/createDataset\" activeStyle = {selectedStyle}>Create DateSets</NavLink></Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"experiment\" icon={<FundOutlined />} title=\"Experiments\">\n                    <Menu.Item key=\"experimentsSummary\"><NavLink to=\"/experiment/summary\" activeStyle = {selectedStyle}>Summary</NavLink></Menu.Item>\n                    <Menu.Item key=\"createExperiment\"><NavLink to=\"/experiment/create\" activeStyle = {selectedStyle}>Create</NavLink></Menu.Item>\n                    <Menu.Item key=\"experimentsDetail\"><NavLink to=\"/experiment/detail\" activeStyle = {selectedStyle}>Details</NavLink></Menu.Item>\n                    <Menu.Item key=\"compareExperiment\"><NavLink to=\"/experiment/compare\" activeStyle = {selectedStyle}>Compare</NavLink></Menu.Item>\n\n                </SubMenu>\n                </Menu>\n            </Sider>\n        )\n    }\n}\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/Header/Header.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/components/Footer/Footer.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/containers/Prediction/Prediction.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/containers/Datasets/Datasets.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/containers/Expriments/Expriments.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/components/InputData/InputData.js",["90","91","92"],"import React, { Component } from 'react';\nimport Style from './inputdata.module.css'\nimport { Select } from 'antd';\nimport { Input, Button, message } from 'antd';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nexport default class InputData extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            dataType:'snp',\n            model:'',\n            inputData:'',\n            SNPsInfo:'',\n            experimentInfo:[],\n        };\n    }\n\n    componentWillMount = () => {\n        this.fetchExperimentInfo();\n    }\n\n    fetchExperimentInfo = () => {\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n          };\n        fetch(`/api/operation/retrieve_experiment_summary/?localstorage_id=${localStorage.getItem('G2PDeep')}`, requestOptions)\n        .then(response => response.text())\n        .then(result => this.getExperimentInfo(result))\n        .catch(error => console.log('error', error));\n    }\n\n    getExperimentInfo = (result) => {\n        let info = JSON.parse(result).message;\n        // console.log(dataInfo)\n        this.setState({\n            experimentInfo: info,\n        })\n    }\n    \n    onChangeDataType = (value) =>{\n        console.log(`selected ${value}`);\n        this.setState({\n            dataType:value,\n        })\n    }\n\n    onChangeModel = (value) =>{\n        console.log(`selected ${value}`);\n        this.setState({\n            model:value,\n        })\n    }\n\n    onChangeInputData = ({ target: { value } }) => {\n        this.setState({\n            inputData:value\n        })\n    };\n\n    onChangeSNPsInfo = ({ target: { value } }) => {\n        this.setState({\n            SNPsInfo:value\n        })\n    };\n\n    submit = () => {\n        if (this.state.SNPsInfo !=='' && this.state.inputData!='' && this.state.medel!='') {\n            this.props.submit(this.state.dataType, this.state.model, this.state.inputData, this.state.SNPsInfo)\n        }else{\n            message.warning(\"Invalid Input\")\n        }\n        \n    };\n\n    render() {\n        // console.log(this.state.experimentInfo)\n        let dataType = (\n            <div>\n                <label className={Style.title}>DataType :</label>\n                <br></br>\n                <Select\n                    className={Style.selectData}\n                    showSearch\n                    placeholder=\"Select a DataType\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onChangeDataType}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    <Option value=\"jacDNA Mathylationk\">DNA Mathylation</Option>\n                    <Option value=\"SNPs\">SNPs</Option>\n                </Select>\n            </div>\n        )\n        let model = (\n            <div style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Model:</label>\n                <br></br>\n                <Select\n                    className={Style.selectModel}\n                    showSearch\n                    placeholder=\"Select a Model\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onChangeModel}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    {\n                        this.state.experimentInfo.map(element => {\n                            // console.log(element)\n                            return <Option value={element.experiment_info_id}>{element.experiment_name}</Option>\n                        })\n                    }\n                </Select>\n            </div>\n        )\n\n        let inputData=(\n            <div style={{clear:'both',paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Input Data :</label>\n                    <a href = '###' className = {Style.inputData_a} >example</a>\n                    {/* <a href = '###' className = {Style.inputData_a} >upload</a> */}\n                </div>\n                <TextArea\n                className={Style.inputData}\n                onChange={this.onChangeInputData}\n                placeholder=\"Iinput your data\"\n                rows={6}\n                />\n            </div>\n        )\n        let SNPsInfo=(\n            <div style={{clear:'both',paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Additional SNPs Information :</label>\n                </div>\n                <TextArea\n                className={Style.inputData}\n                onChange={this.onChangeSNPsInfo}\n                placeholder=\"Iinput your SNPsInfo\"\n                rows={6}\n                />\n            </div>\n        )\n        return (\n            <div>\n                {/* {dataType} */}\n                {model}\n                {inputData}\n                {SNPsInfo}\n                <div style={{paddingTop:'40px'}}>\n                    <Button type=\"primary\" size={'large'} onClick = {this.submit}>Submit</Button>\n                </div>\n            </div>\n        )\n    }\n}\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/Result/Result.js",["93"],"import React, { Component } from 'react'\nimport Style from './result.module.css'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { Collapse } from 'antd';\n\nconst { Panel } = Collapse;\n\nexport default class Result extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            result:props.result\n        }\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        this.setState({\n            result:nextProps.result,\n        })\n    }\n\n    render() {\n        console.log(this.state.result)\n        let options={}\n        if(this.state.result !== undefined){\n            let tableData = this.state.result.predicted_values;\n            let categories =[];\n            tableData.forEach((element, index) => {\n                let temp = \"Sample\"+(index+1);\n                categories.push(temp)\n            });\n            options = {\n                chart: {\n                    width:800,\n                    type: 'bar'\n                },\n                title: {\n                    text: 'Predicted values for given input'\n                },\n                subtitle: {\n                    text: ''\n                },\n                yAxis: {\n                min: -4,\n                title: {\n                    text: '',\n                    align: 'high'\n                },\n                labels: {\n                    overflow: 'justify'\n                }\n                    },\n                xAxis: {\n                    categories: categories,\n                    title: {\n                        text: null\n                    },\n                    labels: {\n                        step: 1\n                    }\n                },\n                series: [{\n                    name: 'Predicted values',\n                    data: tableData\n                }, ]\n            }\n        }\n        let res = (\n            <div></div>\n        )\n        if(this.state.result !== undefined){\n            res=(\n                <div style={{clear:'both',paddingTop:'30px', width:'900px'}}>\n                  \n                        <label className={Style.title}>Result</label>\n                        <Collapse defaultActiveKey={['1','2']} >\n                        <Panel header=\"Predicted values for given input\" key=\"1\">\n                        <HighchartsReact \n                            highcharts={Highcharts}\n                            options={options}\n                            />\n                        </Panel>\n                        <Panel header=\"Saliency Map\" key=\"2\">\n                        <img src={this.state.result.saliency_map_url} style={{width:'800px'}}></img>\n                        </Panel>\n                    </Collapse>\n                  \n                    \n                </div>\n            )\n        }\n        return (\n            <div className={Style.mian}>\n                {res}\n            </div>\n        )\n    }\n}\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetCreate/DatasetCreate.js",["94"],"import React, { Component } from 'react'\nimport Style from './datasetCreate.module.css'\nimport { Select } from 'antd';\nimport { Input, Button, message } from 'antd';\nimport { withRouter } from 'react-router-dom'\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nclass DatasetCreate extends Component {\n    constructor(props, context){\n        super(props, context);\n        this.state = {\n            datasetName:'',\n            dataType:'',\n            dataTrainUrl:'',   \n            description:''\n        };\n    }\n    \n    onChangeDatasetName = ({ target: { value } }) => {\n        this.setState({\n            datasetName:value\n        })\n    };\n\n    onChangeDataType = (value) =>{\n        // console.log(`selected ${value}`);\n        this.setState({\n            dataType:value,\n        })\n    }\n\n    onChangeDataUrl = ({ target: { value } }) => {\n        this.setState({\n            dataTrainUrl:value\n        })\n    };\n\n\n    onChangeDescription = ({ target: { value } }) => {\n        this.setState({\n            description:value\n        })\n    };\n\n    fetchToCreate = () => {\n        let myHeaders = new Headers();\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        let raw = JSON.stringify({\n            \"localstorage_id\":localStorage.getItem('G2PDeep'),\n            \"dataset_name\":this.state.datasetName,\n            \"dataset_type_key\":'snp',\n            \"training_dataset_url\":this.state.dataTrainUrl,\n            \"description\":this.state.description,\n            \"test_dataset_url\":''\n        });\n        var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n        };\n        fetch(\"/api/datasets/create_training_dataset/\", requestOptions)\n        .then(response => response.text())\n        .then(result => this.checkCreate(result))\n        .catch(error => console.log('error', error));\n    }\n\n    checkCreate = (result) => {\n        // console.log(result)\n        let status = JSON.parse(result).status;\n        if (status === 'SUCCESS') {\n            this.props.fetchDatasetInfo();\n            this.props.history.push(\"/datasets/summary\");\n        } else {\n            message.warning(JSON.parse(result).message)\n        }\n    }\n\n    create = () => {\n        // console.log(this.state.dataType,this.state.datasetName,\n        //     this.state.description,this.state.dataTrainUrl)\n        if ( this.state.datasetName !== '' && \n        this.state.description !== '' && this.state.dataTrainUrl !== '' ) \n        {\n            this.fetchToCreate();\n        }else{\n            message.warning('Invalid creation')\n        }\n    };\n    render() {\n        // console.log(this.context)\n        let datasetName = (\n            <div id = 'datasetName'>\n                <label className={Style.title}>Dataset Name :</label>\n                <br></br>\n                <Input placeholder=\"input your dataset's name\" \n                    allowClear \n                    onChange={this.onChangeDatasetName} \n                    className = {Style.inputDatasetName} />\n            </div>\n        )\n        let dataType = (\n            <div id = 'dataType' style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Data Type :</label>\n                <br></br>\n                <Select\n                    className={Style.dataType}\n                    showSearch\n                    placeholder=\"Select a Model\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onChangeDataType}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    <Option value=\"jacDNA Mathylationk\">DNA Mathylation</Option>\n                    <Option value=\"snp\">SNPs</Option>\n                </Select>\n            </div>\n        );\n        let dataUrl = (\n            <div id = 'dataUrl' style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Link to training and validation dataset :</label>\n                <br></br>\n                <Input placeholder=\"input your dataset's name\" \n                    allowClear \n                    onChange={this.onChangeDataUrl} \n                    className = {Style.dataUrl} />\n            </div>\n        );\n        let Description=(\n            <div style={{paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Description :</label>\n                </div>\n                <TextArea\n                    className={Style.description}\n                    onChange={this.onChangeDescription}\n                    placeholder=\"Iinput your data\"\n                    autoSize={{ minRows: 6}}\n                />\n            </div>\n        )\n        return (\n            <div>\n                {datasetName}\n                {/* {dataType} */}\n                {dataUrl}\n                {Description}\n                <div style={{paddingTop:'40px'}}>\n                    <Button type=\"primary\" size={'large'} onClick = {this.create}>Create</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(DatasetCreate)\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetSummary/DatasetSummary.js",["95"],"import React, { Component } from 'react'\nimport { Table, Input, Button, Space } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\n\nexport default class Summary extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      datasetsInfo:props.datasetsInfo,\n    };\n    this.columns_table = [\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: '10%',\n      },\n      {\n        title: 'Datasets\\' Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n      },\n      {\n        title: 'Number of samples',\n        dataIndex: 'NumberOfSamples',\n        key: 'NumberOfSamples',\n        width: '30%',\n      },\n      {\n        title: 'Create Date',\n        dataIndex: 'date',\n        key: 'date',\n        width: '30%',\n      },\n    ];\n  }\n    \n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n        : '',\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select(), 100);\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n  \n  componentWillReceiveProps = (nextProps) => {\n    // console.log(nextProps.datasetsInfo)\n    this.setState({\n      datasetsInfo:nextProps.datasetsInfo,\n    });\n  }\n\n  showDetails = (index, datasetId) => {\n    // console.log(this.state.datasetsInfo[index])\n    this.props.showDetails(index, datasetId);\n  }\n\n  render() {\n    const data_table = []\n    this.state.datasetsInfo.forEach((element,index) => {\n      data_table.push(\n        {\n          id: index+1,\n          key:element.dataset_info_id,\n          name: <a onClick = {() => {this.showDetails(index, element.dataset_info_id)}}><Link to=\"/datasets/details\">{element.dataset_name}</Link></a>,\n          NumberOfSamples: element.num_samples,\n          date: element.created_at,\n        }\n      )\n    })\n      \n    return (\n        <div id = 'dataTable' style = {{width:'850px'}}>\n            <Table \n            columns={this.columns_table} dataSource={data_table} \n            bordered/>\n        </div>\n    )\n  }\n}\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/DatasetDetails/DatasetDetails.js",[],"/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentCreate/ExperimentCreate.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"import React, { Component } from 'react'\nimport Style from './experimentCreate.module.css'\nimport { Select, Button, Input, message } from 'antd';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {Typography} from '@material-ui/core'\nimport csvImg from './export-csv.png'\nimport arrowInput from './arrow-input.png'\nimport cnn from './cnn.png'\nimport fcn from './fcn.png'\nimport $ from 'jquery'\nimport { withRouter } from 'react-router-dom'\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nclass ExperimentCreate extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state={\n            maxLayerNum:3,\n            leftCnnLayerNum:1,\n            rightCnnLayerNum:1,\n            fCnnLayerNum:1,\n            leftCnn:[],\n            rightCnn:[],\n            fCn:[],\n            description:'',\n            experimentName:'',\n            dataset:'',\n            datasetInfo:[],\n            learningRate:0.00001,\n        }\n    }\n\n    componentWillMount = () => {\n        this.fetchDatasetInfo();\n    }\n\n    fetchDatasetInfo = () => {\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        fetch(`/api/datasets/retrieve_dataset_info/?localstorage_id=${localStorage.getItem('G2PDeep')}`, requestOptions)\n          .then(response => response.text())\n          .then((result) => this.getDatasetInfo(result))\n          .catch(error => console.log('error', error));\n      }\n    \n    //set datasets_info as a global parameter \n    getDatasetInfo = (result) => {\n        let datasetName = []\n        let dataInfo = JSON.parse(result).message;\n        // console.log(dataInfo)\n        this.setState({\n            datasetInfo: dataInfo,\n        })\n    }\n\n    fetchToCreate = () => {\n        //get data\n        let epoch_num = 1000;\n        let batch_num = 256;\n        var left_filters_arr = new Array();\n        var left_kernel_size_arr = new Array();\n        var right_filters_arr = new Array();\n        var right_kernel_size_arr = new Array();\n        var fcn_size_arr = new Array();\n        $(\"input[name='left_filters[]']\").each(function () {\n          left_filters_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='left_kernel_size[]']\").each(function () {\n          left_kernel_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='right_filters[]']\").each(function () {\n          right_filters_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='right_kernel_size[]']\").each(function () {\n          right_kernel_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='num_fcn[]']\").each(function () {\n          fcn_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='epoch_num']\").each(function () {\n            epoch_num = parseInt( $(this).val() );\n        });\n        $(\"input[name='batch_num']\").each(function () {\n            batch_num = parseInt( $(this).val() );\n        });\n        // console.log(\"----\");\n        // console.log(left_filters_arr);\n        // console.log(left_kernel_size_arr);\n        // console.log(right_filters_arr);\n        // console.log(right_kernel_size_arr);\n        // console.log(fcn_size_arr);\n        // console.log(epoch_num)\n        // console.log(\"---------------------\");\n\n        //fetch to create\n        var myHeaders = new Headers();\n        myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        var raw = JSON.stringify(\n            {\n                \"localstorage_id\":localStorage.getItem('G2PDeep'),\n                \"experiment_name\":this.state.experimentName,\n                \"dataset_info_id\":this.state.dataset,\n                \"description\":this.state.description,\n                \"experimental_parameters\":\n                {\n                    \"learning_rate\":this.state.learningRate,\n                    \"epochs\":epoch_num,\n                    \"batch_size\":batch_num,\n                },\n                \"model_hyperparameters\":\n                {\n                    \"left_tower_filters_list\":left_filters_arr,\n                    \"left_tower_kernel_size_list\":left_kernel_size_arr,\n                    \"right_tower_filters_list\":right_filters_arr,\n                    \"right_tower_kernel_size_list\":right_kernel_size_arr,\n                    \"central_tower_filters_list\":[10],\n                    \"central_tower_kernel_size_list\":[4],\n                    \"dnn_size_list\":fcn_size_arr,\n                }\n            });\n        var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n        };\n        fetch(\"/api/operation/conduct_experiment/\", requestOptions)\n        .then(response => response.text())\n        .then(result => this.checkCreate(result))\n        .catch(error => console.log('error', error));\n\n    }\n\n    checkCreate = (result) => {\n        let status = JSON.parse(result).status;\n        if (status === 'SUCCESS') {\n            this.props.fetchExperimentInfo();\n            this.props.history.push(\"/experiment/summary\");\n        } else {\n            message.warning(JSON.parse(result).message)\n        }\n    }\n\n    onChangeExperimentName = ({ target: { value } }) => {\n        this.setState({\n            experimentName:value\n        })\n    };\n\n    onchageDataset = (value) => {\n        console.log(`selected ${value}`);\n        this.setState({\n            dataset:value,\n        })\n    }\n\n    onchageLearningRate = (value) => {\n        this.setState({\n            learningRate:value,\n        })\n    }\n\n    onChangeDescription = ({ target: { value } }) => {\n        this.setState({\n            description:value\n        })\n    };\n\n    addLeftCnn = () =>{\n        if(this.state.leftCnnLayerNum < this.state.maxLayerNum ){\n            let temp= [...this.state.leftCnn];\n            temp.push(\n                <div>\n                    <img src={arrowInput} style={{height:'20px', marginLeft:'340px', marginBottom:'10px'}}></img>\n                    <div>\n                        <Slider\n                            name='left_filters[]'\n                            style = {{color:'#1165f1',width:'100px'}}\n                            defaultValue={5}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <Slider\n                            name='left_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <img src={cnn} style={{width:'150px', marginLeft:'50px',marginTop:'-20px'}}></img>\n                        </div>\n                </div>\n            )\n            this.setState({\n                leftCnn:temp,\n                leftCnnLayerNum:this.state.leftCnnLayerNum+1,\n            })\n        }\n    }\n\n    addRightCnn = () =>{\n        if(this.state.rightCnnLayerNum < this.state.maxLayerNum){\n            let temp= [...this.state.rightCnn];\n            temp.push(\n                <div>\n                    <img src={arrowInput} style={{height:'20px', marginLeft:'60px', marginBottom:'10px'}}></img>\n                    <div>\n                    <img src={cnn} style={{width:'150px',marginTop:'-20px'}}></img>\n                            <Slider\n                                name='right_filters[]'\n                                style = {{color:'#1165f1',width:'100px',marginLeft:'45px'}}\n                                defaultValue={5}\n                                //   getAriaValueText={valuetext}\n                                aria-labelledby=\"discrete-slider-small-steps\"\n                                min={3} max={12} step={1}\n                                valueLabelDisplay=\"auto\"\n                                />\n                            <Slider\n                                name='right_kernel_size[]'\n                                style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                                defaultValue={10}\n                                //   getAriaValueText={valuetext}\n                                aria-labelledby=\"discrete-slider-small-steps\"\n                                min={4} max={30} step={1}\n                                valueLabelDisplay=\"auto\"\n                                />\n                    </div>\n                </div>\n            )\n            this.setState({\n                rightCnn:temp,\n                rightCnnLayerNum:this.state.rightCnnLayerNum+1\n            })\n        }\n    }\n\n    addFCnn = () => {\n        if(this.state.fCnnLayerNum < this.state.maxLayerNum){\n            let temp = [...this.state.fCn];\n            temp.push(\n                <div>\n                    <div>\n                        <Slider\n                            name='num_fcn[]'\n                            style = {{color:'#1165f1',width:'250px'}}\n                            defaultValue={1}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={1} max={512} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <img src={fcn} style={{width:'300px',marginLeft:'45px'}}></img>\n                    </div>\n                    <div style={{textAlign:'center'}}>\n                        <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                        <img src={arrowInput} style={{height:'32px'}}></img>\n                    </div>\n                </div>\n            )\n            this.setState({\n                fCn:temp,\n                fCnnLayerNum:this.state.fCnnLayerNum+1\n            })\n        }\n    }\n\n    delLeftCnn = () => {\n        let temp = [...this.state.leftCnn];\n        temp.pop();\n        this.setState({\n            leftCnn:temp,\n            leftCnnLayerNum:this.state.leftCnnLayerNum-1\n        })\n    }\n\n    delRightCnn = () => {\n        let temp = [...this.state.rightCnn];\n        temp.pop();\n        this.setState({\n            rightCnn:temp,\n            rightCnnLayerNum:this.state.rightCnnLayerNum-1\n        })\n    }\n\n    delFCn = () => {\n        let temp = [...this.state.fCn];\n        temp.pop();\n        this.setState({\n            fCn:temp,\n            fCnnLayerNum:this.state.fCnnLayerNum-1,\n        })\n    }\n\n    create = () =>{\n        if (this.state.dataset != '' && this.state.description != '' \n            && this.state.experimentName != '') {\n            this.fetchToCreate();\n        }else{\n            message.warning('Invalid Input')\n        }\n    }\n\n    render() {\n        // console.log(this.state.a)\n        let experimentName = (\n            <div id = 'experimentName'>\n                <label className={Style.title}>Experiment Name :</label>\n                <br></br>\n                <Input placeholder=\"input your dataset's name\" \n                    allowClear \n                    onChange={this.onChangeExperimentName} \n                    className = {Style.inputDatasetName} />\n            </div>\n        )\n        let dataset = (\n            <div id = 'dataset' style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Choose dataset :</label>\n                <br></br>\n                <Select\n                    className={Style.dataType}\n                    showSearch\n                    placeholder=\"Select a Model\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onchageDataset}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    {\n                        this.state.datasetInfo.map((value) =>{\n                            return <Option value={value.dataset_info_id}>{value.dataset_name}</Option>\n                          })\n                    }\n                </Select>\n            </div>\n        );\n        let parameter = (\n            <div style = {{width:'850px',paddingTop:'30px'}}>\n                <label className={Style.title}>Experiment parameters :</label>\n                <br></br>\n                <label className={Style.title_small}>Epoch :</label>\n                <Slider\n                    name = 'epoch_num'\n                    style = {{color:'#1165f1',width:'900px'}}\n                    defaultValue={1000}\n                    //   getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider-small-steps\"\n                    step={200}\n                    marks\n                    min={200}\n                    max={2001}\n                    valueLabelDisplay=\"on\"\n                    />\n                <br></br>\n                <label className={Style.title_small}>Batch size :</label>\n                <Slider\n                    name='batch_num'\n                    style={{color:'rgba(239, 28, 65, 0.97)',width:'900px'}}\n                    defaultValue={256}\n                    //   getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider-small-steps\"\n                    step={32}\n                    marks\n                    min={32}\n                    max={513}\n                    valueLabelDisplay=\"on\"\n                    />\n            </div>\n        )\n        let learningRate =(\n            <div style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Learning Rate :</label>\n                <br></br>\n                <Select\n                    className={Style.dataType}\n                    showSearch\n                    placeholder=\"0.00001\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onchageLearningRate}\n                >\n                  <Option value={0.00001}>0.00001</Option>\n                  <Option value={0.0001}>0.0001</Option>\n                  <Option value={0.001}>0.001</Option>\n                  <Option value={0.003}>0.003</Option>\n                  <Option value={0.01}>0.01</Option>\n                  <Option value={0.03}>0.03</Option>\n                  <Option value={0.1}>0.1</Option>\n                  <Option value={0.3}>0.3</Option>\n                  <Option value={1}>1</Option>\n                  <Option value={3}>3</Option>\n                  <Option value={10}>10</Option>\n                   \n                </Select>\n            </div>\n        )\n        let modeling = (\n            <div style = {{width:'900px',paddingTop:'30px'}}>\n                <label className={Style.title}>Hyperparameters :</label>\n                <Grid container >\n                    {/* top layer */}\n                    <Grid xs={12} style={{backgroundColor:'rgb(250, 234, 234)'}}>\n                        <div style={{textAlign:'center'}}>\n                            <img src={csvImg}></img>\n                        </div>\n                        <div style={{textAlign:'center'}}>\n                            <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                            <img src={arrowInput} style={{height:'32px'}}></img>\n                        </div>\n                    </Grid>\n                    {/* sencond layer left */}\n                    <Grid name = 'leftCNN'xs={6} style={{backgroundColor:'rgb(255, 255, 208)', padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                          <Typography variant=\"subtitle1\">Left Tower (CNN)</Typography>\n                        </div>\n                        <div>\n                          <span>Add/Delete layer (min:1, max:3)</span>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'40px',backgroundColor:'#1165f1'}}\n                              onClick={this.addLeftCnn}\n                              >Add Layer</Button>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                              onClick={this.delLeftCnn}\n                              >Del Layer</Button>\n                        </div>\n                        <div>\n                        <br></br>\n                            <pre>filters         size of flter</pre>\n                        </div>\n                        <div>\n                        <Slider\n                            name='left_filters[]'\n                            style = {{color:'#1165f1',width:'100px'}}\n                            defaultValue={5}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <Slider\n                            name='left_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <img src={cnn} style={{width:'150px', marginLeft:'50px',marginTop:'-20px'}}></img>\n                        </div>\n                        {\n                            this.state.leftCnn.map(element =>{\n                                return element;\n                            })\n                        }\n                    </Grid>\n                    {/* second layer right */}\n                    <Grid xs={6} style={{backgroundColor:'rgb(227, 252, 228)',padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                          <Typography variant=\"subtitle1\">Right Tower (CNN)</Typography>\n                        </div>\n                        <div>\n                          <span>Add/Delete layer (min:1, max:3)</span>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'40px',backgroundColor:'#1165f1'}}\n                              onClick={this.addRightCnn}\n                              >Add Layer</Button>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                              onClick={this.delRightCnn}\n                              >Del Layer</Button>\n                        </div>\n                        <div>\n                            <br></br>\n                            <pre>                       filters         size of flter</pre>\n                        </div>\n                        <div>\n                        <img src={cnn} style={{width:'150px',marginTop:'-20px'}}></img>\n                        <Slider\n                            name='right_filters[]'\n                            style = {{color:'#1165f1',width:'100px',marginLeft:'45px'}}\n                            defaultValue={5}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <Slider\n                            name='right_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1} \n                            valueLabelDisplay=\"auto\"\n                            />\n                        </div>\n                        {\n                            this.state.rightCnn.map(element =>{\n                                return element;\n                            })\n                        }\n                    </Grid>\n                    {/* last layer */}\n                    <Grid xs={12} style={{backgroundColor:'rgb(229, 226, 250)',padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                            <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                            <img src={arrowInput} style={{height:'32px'}}></img>\n                        </div>\n                        <div>\n                            <span style={{marginLeft:'100px'}}>Size</span>\n                            <span variant=\"subtitle1\" style={{marginLeft:'200px'}}>Fully connected neural network</span>\n                            <Button type='primary' size='small' \n                                style={{marginLeft:'110px',backgroundColor:'#1165f1'}}\n                                onClick={this.addFCnn}\n                                >Add Layer</Button>\n                            <Button type='primary' size='small' \n                                style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                                onClick={this.delFCn}\n                                >Del Layer</Button>\n                        </div>\n                        {\n                            this.state.fCn.map(element => {\n                                return element;\n                            })\n                        }\n                        <div>\n                        <Slider\n                            name='num_fcn[]'\n                            style = {{color:'#1165f1',width:'250px'}}\n                            defaultValue={1}\n                            value={1}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={1} max={512} step={1}\n                            valueLabelDisplay=\"auto\"\n                            />\n                        <img src={fcn} style={{width:'300px',marginLeft:'45px'}}></img>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n\n        let Description=(\n            <div style={{paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Description :</label>\n                </div>\n                <TextArea\n                    className={Style.description}\n                    onChange={this.onChangeDescription}\n                    placeholder=\"Iinput your data\"\n                    autoSize={{ minRows: 3}}\n                />\n            </div>\n        )\n        return (\n            <div>\n                {experimentName}\n                <br></br>\n                {dataset}\n                <br></br>\n                {learningRate}\n                <br></br>\n                {Description}\n                <br></br>\n                {parameter}\n                <br></br>\n                {modeling}\n                <Button type=\"primary\" size='large'\n                style ={{marginTop:'30px'}}\n                onClick={this.create}>Create</Button>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ExperimentCreate)\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentSummary/ExperimentSummary.js",["122"],"import React, { Component } from 'react'\nimport { Table, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\n\nexport default class ExperimentSummary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedRowKeys: [], // Check here to configure the default column\n            loading: false,\n            experimentInfo:props.experimentInfo,\n        }\n        this.tableColumns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n            },\n            {\n                title: 'Created Date',\n                dataIndex: 'createdDate',\n            },\n            {\n                title: 'Updated Date',\n                dataIndex: 'updatedDate',\n            },\n            {\n                title:'Status',\n                dataIndex:'status',\n            }\n        ]\n    }\n\n    // componentDidMount = () => {\n    //     this.props.history.push(\"/datasets/summary\")\n    // }\n\n    componentWillReceiveProps = (nextProps) => {\n      // console.log(nextProps.datasetsInfo)\n      this.setState({\n        experimentInfo:nextProps.experimentInfo,\n      });\n    }\n\n    compare = () => {\n        this.setState({ loading: true });\n        //ajax request after empty completing\n        setTimeout(() => {\n            this.setState({\n                selectedRowKeys: [],\n                loading: false,\n          });\n        }, 3000);\n        \n        this.props.compare(this.state.selectedRowKeys)\n        // console.log(this.state.selectedRowKeys)\n      };\n    \n    onSelectChange = selectedRowKeys => {\n        if(selectedRowKeys.length<=4){\n            console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys:selectedRowKeys });\n        }else{\n            message.warning('Choose up to 4 !')\n        }\n        \n    };\n\n    showDetails = (index, id) => {\n        // console.log(index,id)\n        this.props.showDetails(index, id);\n      }\n\n    render() {\n        const { loading, selectedRowKeys } = this.state;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n        const data_table = []\n        this.state.experimentInfo.forEach((element,index) => {\n            // success ruuning \n            if(element.experiment_status === 'SUCCESS' ){\n                data_table.push(\n                    {\n                      name: <a onClick = {() => {this.showDetails(index, element.experiment_info_id)}}><Link to=\"/experiment/detail\">{element.experiment_name}</Link></a>,\n                      description:element.description,\n                      createdDate:element.created_at,\n                      updatedDate:element.updated_at,\n                      status:element.experiment_status,\n                      key:element.experiment_info_id,\n                    }\n                  )\n            }else{\n                // failed\n                console.log(\"Failed\")\n            }\n        })\n        return (\n            <div id = 'experiment_summary_content' style = {{width:'850px'}}>\n                <div style={{ marginBottom: 16 }}>\n                <Button type=\"primary\" onClick={this.compare} disabled={!hasSelected} loading={loading}>\n                    Compare\n                </Button>\n                <span style={{ marginLeft: 8 }}>\n                    {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\n                </span>\n                </div>\n                <Table rowSelection={rowSelection} columns={this.tableColumns} dataSource={data_table} bordered />\n            </div>\n        )\n    }\n}\n","/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentCompare/ExperimentCompare.js",["123","124"],"import React, { Component } from 'react'\nimport { Table, Tag, Space, Empty } from 'antd';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Style from './experimentCompare.module.css'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst options = {\n    chart: {\n      width: 900\n  },\n  title: {\n    text: ''\n  },\n  yAxis: {\n    title: {\n      text: 'Metric'\n    }\n  },\n  xAxis: {\n    title: {\n      text: 'Epochs'\n    }\n  },\n  legend: {\n    layout: 'vertical',\n    align: 'right',\n    verticalAlign: 'middle'\n  },\n  plotOptions: {\n    series: {\n      label: {\n        connectorAllowed: false\n      },\n      pointStart: 1\n    }\n  },\n  series: [],\n  responsive: {\n    rules: [{\n      condition: {\n        maxWidth: 500\n      },\n      chartOptions: {\n        legend: {\n          layout: 'horizontal',\n          align: 'center',\n          verticalAlign: 'bottom'\n        }\n      }\n    }]\n  }\n}\n\nclass ExperimentCompare extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            compareInfo:props.compareInfo\n        }\n        this.tableColumns = [\n            {\n                title: 'Properties',\n                width: 100,\n                dataIndex: 'properties',\n                key: 'name',\n                fixed: 'left',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n                key:'description',\n            },\n            {\n                title: 'dataset_name',\n                dataIndex: 'dataset_name',\n                key:'dataset_name'\n            },\n            {\n                title: 'Mean Absolute Error(train_metric)',\n                dataIndex: 'MEAN_ABSOLUTE_ERROR_train',\n                key:'MEAN_ABSOLUTE_ERROR_train'\n            },\n            {\n                title:'Mean Squared Error(train_metric)',\n                dataIndex:'MEAN_SQUARED_ERROR_train',\n                key:'MEAN_SQUARED_ERROR_train'\n            },\n            {\n                title:'Person Correlation Coefficient(train_metric)',\n                dataIndex:'PEARSON_CORRELATION_COEFFICIENT_train',\n                key:'PEARSON_CORRELATION_COEFFICIENT_train'\n            },\n            {\n                title:'Person Correlation Coefficient(valid_metric)',\n                dataIndex:'PEARSON_CORRELATION_COEFFICIENT_valid',\n                key:'PEARSON_CORRELATION_COEFFICIENT_valid'\n            },\n            {\n                title:'Mean Absolute Error(valid_metric)',\n                dataIndex:'MEAN_ABSOLUTE_ERROR_valid',\n                key:'MEAN_ABSOLUTE_ERROR_valid'\n            },\n            {\n                title:'Mean Squared Error(valid_metric)',\n                dataIndex:'MEAN_SQUARED_ERROR_valid',\n                key:'MEAN_SQUARED_ERROR_valid'\n            },\n            {\n                title:'loss',\n                dataIndex:'loss',\n                key:'loss'\n            },\n            {\n                title:'epochs',\n                dataIndex:'epochs',\n                key:'epochs'\n            },\n            {\n                title:'metrics',\n                dataIndex:'metrics',\n                key:'metrics'\n            },\n            {\n                title:'optimizer',\n                dataIndex:'optimizer',\n                key:'optimizer'\n            },\n            {\n                title:'batch_size',\n                dataIndex:'batch_size',\n                key:'batch_size'\n            },\n            {\n                title:'learning_rate',\n                dataIndex:'learning_rate',\n                key:'learning_rate'\n            },\n        ]\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        console.log(nextProps.compareInfo)\n        this.setState({\n            compareInfo:nextProps.compareInfo,\n        })\n    }\n\n    afterChartCreated=(chart)=> {\n        // console.log(chart)\n        this.internalChart=chart\n    }\n\n    render() {\n        if (this.state.compareInfo.length > 0) {\n            console.log(this.state.compareInfo)\n              let learning_curve_series_data = [];\n              this.state.compareInfo.forEach(element => {\n                learning_curve_series_data = learning_curve_series_data.concat(element.learning_curve_series_data)\n              })\n              for( let data of learning_curve_series_data) {\n                  this.internalChart.addSeries(data);\n                  // console.log(data)\n                }\n          }\n        const compareData =[]\n        let compareTable = (\n            <div id ='empty' style = {{paddingTop:'50px'}}>\n                <Empty />\n            </div>\n        )\n        if(this.state.compareInfo.length > 0){\n            this.state.compareInfo.forEach((element, index) => {\n                compareData.push(\n                    {\n                        key:index,\n                        properties:element.experiment_name,\n                        dataset_name:element.dataset_name,\n                        MEAN_ABSOLUTE_ERROR_train:element.train_metric.MEAN_ABSOLUTE_ERROR,\n                        MEAN_SQUARED_ERROR_train:element.train_metric.MEAN_SQUARED_ERROR,\n                        PEARSON_CORRELATION_COEFFICIENT_train:element.train_metric.PEARSON_CORRELATION_COEFFICIENT,\n                        MEAN_ABSOLUTE_ERROR_valid:element.valid_metric.MEAN_ABSOLUTE_ERROR,\n                        MEAN_SQUARED_ERROR_valid:element.valid_metric.MEAN_SQUARED_ERROR,\n                        PEARSON_CORRELATION_COEFFICIENT_valid:element.valid_metric.PEARSON_CORRELATION_COEFFICIENT,\n                        loss:element.experimental_parameters.loss,\n                        epochs:element.experimental_parameters.epochs,\n                        metrics:element.experimental_parameters.metrics,\n                        optimizer:element.experimental_parameters.optimizer,\n                        batch_size:element.experimental_parameters.batch_size,\n                        learning_rate:element.experimental_parameters.learning_rate,\n                    }\n                )\n            });\n            compareTable =(\n                <Table columns={this.tableColumns} dataSource={compareData} scroll={{ x: 2300 }} />\n            ) \n        }\n        return (\n            <div>\n                 <label className={Style.title}>Summary of experiments: </label>\n                 {compareTable}\n                <br></br>\n                <label className={Style.title}>Observation Chart:</label>\n                <HighchartsReact \n                    // style ={{width:'900px'}}\n                    highcharts={Highcharts}\n                    options={options}\n                    callback={ this.afterChartCreated }\n                />\n            </div>\n        )\n    }\n}\n\nexport default ExperimentCompare\n",["125","126"],"/var/www/html/Dev/G2PDeep_Frontend/src/components/ExperimentDetail/ExperimentDetail.js",["127","128"],"import React, { Component } from 'react'\nimport { Descriptions, Badge, Empty } from 'antd';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nconst options1 = {\n        chart: {\n          width: 900\n      },\n      title: {\n        text: ''\n      },\n      yAxis: {\n        title: {\n          text: 'Metric/Loss'\n        }\n      },\n      xAxis: {\n        title: {\n          text: 'Epochs'\n        }\n      },\n      legend: {\n        layout: 'vertical',\n        align: 'right',\n        verticalAlign: 'middle'\n      },\n      plotOptions: {\n        series: {\n          label: {\n            connectorAllowed: false\n          },\n          pointStart: 1\n        }\n      },\n      series: [],\n      responsive: {\n        rules: [{\n          condition: {\n            maxWidth: 500\n          },\n          chartOptions: {\n            legend: {\n              layout: 'horizontal',\n              align: 'center',\n              verticalAlign: 'bottom'\n            }\n          }\n        }]\n      }\n}\n\nconst options2 ={\n  chart: {\n    width: 900,\n    type: 'scatter',\n    zoomType: 'xy'\n  },\n  title: {\n    text: 'True v.s. predicted quantitative traits.'\n  },\n  xAxis: {\n    title: {\n      enabled: true,\n      text: 'True quantitative traits'\n    },\n    startOnTick: true,\n    endOnTick: true,\n    showLastLabel: true\n  },\n  yAxis: {\n    title: {\n      text: 'Predicted quantitative traits'\n    }\n  },\n  legend: {\n    layout: 'vertical',\n    align: 'left',\n    verticalAlign: 'top',\n    x: 100,\n    y: 70,\n    floating: true,\n    backgroundColor: Highcharts.defaultOptions.chart.backgroundColor,\n    borderWidth: 1\n  },\n  plotOptions: {\n    scatter: {\n      marker: {\n        radius: 5,\n        states: {\n          hover: {\n            enabled: true,\n            lineColor: 'rgb(100,100,100)'\n          }\n        }\n      },\n      states: {\n        hover: {\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      tooltip: {\n        headerFormat: '<b>{series.name}</b><br>',\n        pointFormat: '{point.x}, {point.y}'\n      }\n    }\n  },\n  series: []\n}\n\nexport default class ExperimentDetail extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            showIndex:props.showIndex,\n            showDetails_id:props.showDetails_id,\n            experimentInfo:props.experimentInfo,\n            detail:props.detail,\n        }\n        \n    }\n\n    componentWillReceiveProps = (nextProps) => { \n      if (nextProps.detail.length>0) {\n        this.fetchTableData(nextProps.experimentInfo[0].experiment_info_id)\n      }\n        // console.log(nextProps.detail)\n        if (nextProps.detail.length > 0) {\n            this.setState({\n                experimentInfo:nextProps.experimentInfo,\n                showIndex:nextProps.showIndex,\n                showDetails_id:nextProps.showDetails_id,\n                detail:nextProps.detail,\n            })\n        }else{\n            this.setState({\n                detail:nextProps.detail,\n            })\n        }\n    }\n\n    afterChartCreated1=(chart)=> {\n        // console.log(chart)\n        this.internalChart=chart\n    }\n\n    afterChartCreated2=(chart)=> {\n      // console.log(chart)\n      this.internalChart2=chart\n    }\n\n    fetchTableData = (id) => {\n      // console.log(id)\n      var myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n\n      var raw = JSON.stringify(\n        {\n          \"localstorage_id\":localStorage.getItem('G2PDeep'),\n          \"experiment_info_id\":id,\n        });\n\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n      };\n\n      fetch(\"/api/operation/retrieve_experiment_true_predicted_values/\", requestOptions)\n        .then(response => response.text())\n        .then(result => this.getTable2Data(result))\n        .catch(error => console.log('error', error));\n    }\n\n    getTable2Data = (result) => {\n      let tabledata = JSON.parse(result).message;\n      for( let data of tabledata) {\n        this.internalChart2.addSeries(data);\n        // console.log(data)\n      }\n    }\n\n    render() {\n        if (this.state.detail.length > 0) {\n          // console.log(this.state.detail)\n            let learning_curve_series_data = this.state.detail[0].learning_curve_series_data;\n            for( let data of learning_curve_series_data) {\n                this.internalChart.addSeries(data);\n                // console.log(data)\n              }\n        }\n        var detailsDes = (\n            <div id ='empty' style = {{paddingTop:'50px'}}>\n                <Empty />\n            </div>\n        )\n        if (this.state.detail.length > 0) {\n            detailsDes = (\n                <Descriptions \n                style = {{width:'950px'}}\n                bordered\n                column={2} \n                layout=\"vertical\" \n                bordered\n                >\n                    <Descriptions.Item label=\"Dataset Name\">{this.state.detail[0].dataset_name}</Descriptions.Item>\n                    <Descriptions.Item label=\"Type of dataset\">SNPs</Descriptions.Item>\n                    \n                    <Descriptions.Item label=\"Status\" span = {2}>\n                    {this.state.detail[0].experiment_status}\n                    </Descriptions.Item>\n                </Descriptions>\n            )\n        }\n        return (\n            <div >\n                {detailsDes}\n                <br></br>\n                <div style={{display:this.state.detail.length>0 ? 'block':'none'}}>\n                  <p>Learning Curve:</p>\n                  <HighchartsReact \n                      // style ={{width:'900px'}}\n                      highcharts={Highcharts}\n                      options={options1}\n                      callback={ this.afterChartCreated1 }\n                  />\n                  <br></br>\n                  <p>Predicted VS True:</p>\n                  <HighchartsReact \n                      // style ={{width:'900px'}}\n                      highcharts={Highcharts}\n                      options={options2}\n                      callback={ this.afterChartCreated2 }\n                  />\n                </div>\n                \n            </div>\n        )\n    }\n}\n",{"ruleId":"129","severity":1,"message":"130","line":8,"column":7,"nodeType":"131","messageId":"132","endLine":8,"endColumn":13},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"129","severity":1,"message":"137","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":14},{"ruleId":"129","severity":1,"message":"138","line":31,"column":13,"nodeType":"131","messageId":"132","endLine":31,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":71,"column":62,"nodeType":"141","messageId":"142","endLine":71,"endColumn":64},{"ruleId":"139","severity":1,"message":"140","line":71,"column":86,"nodeType":"141","messageId":"142","endLine":71,"endColumn":88},{"ruleId":"129","severity":1,"message":"143","line":81,"column":13,"nodeType":"131","messageId":"132","endLine":81,"endColumn":21},{"ruleId":"144","severity":1,"message":"145","line":85,"column":25,"nodeType":"146","endLine":85,"endColumn":95},{"ruleId":"129","severity":1,"message":"143","line":105,"column":13,"nodeType":"131","messageId":"132","endLine":105,"endColumn":21},{"ruleId":"147","severity":1,"message":"148","line":128,"column":17,"nodeType":"146","endLine":128,"endColumn":89},{"ruleId":"129","severity":1,"message":"149","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":20},{"ruleId":"129","severity":1,"message":"150","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":13},{"ruleId":"129","severity":1,"message":"151","line":56,"column":13,"nodeType":"131","messageId":"132","endLine":56,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":68,"column":32,"nodeType":"154","messageId":"155","endLine":68,"endColumn":43},{"ruleId":"152","severity":1,"message":"153","line":69,"column":36,"nodeType":"154","messageId":"155","endLine":69,"endColumn":47},{"ruleId":"152","severity":1,"message":"153","line":70,"column":33,"nodeType":"154","messageId":"155","endLine":70,"endColumn":44},{"ruleId":"152","severity":1,"message":"153","line":71,"column":37,"nodeType":"154","messageId":"155","endLine":71,"endColumn":48},{"ruleId":"152","severity":1,"message":"153","line":72,"column":28,"nodeType":"154","messageId":"155","endLine":72,"endColumn":39},{"ruleId":"144","severity":1,"message":"145","line":183,"column":21,"nodeType":"146","endLine":183,"endColumn":108},{"ruleId":"144","severity":1,"message":"145","line":203,"column":25,"nodeType":"146","endLine":203,"endColumn":101},{"ruleId":"144","severity":1,"message":"145","line":219,"column":21,"nodeType":"146","endLine":219,"endColumn":107},{"ruleId":"144","severity":1,"message":"145","line":221,"column":21,"nodeType":"146","endLine":221,"endColumn":78},{"ruleId":"144","severity":1,"message":"145","line":265,"column":25,"nodeType":"146","endLine":265,"endColumn":82},{"ruleId":"144","severity":1,"message":"145","line":268,"column":25,"nodeType":"146","endLine":268,"endColumn":90},{"ruleId":"144","severity":1,"message":"145","line":269,"column":25,"nodeType":"146","endLine":269,"endColumn":71},{"ruleId":"139","severity":1,"message":"140","line":308,"column":32,"nodeType":"141","messageId":"142","endLine":308,"endColumn":34},{"ruleId":"139","severity":1,"message":"140","line":308,"column":64,"nodeType":"141","messageId":"142","endLine":308,"endColumn":66},{"ruleId":"139","severity":1,"message":"140","line":309,"column":42,"nodeType":"141","messageId":"142","endLine":309,"endColumn":44},{"ruleId":"144","severity":1,"message":"145","line":416,"column":29,"nodeType":"146","endLine":416,"endColumn":47},{"ruleId":"144","severity":1,"message":"145","line":419,"column":29,"nodeType":"146","endLine":419,"endColumn":94},{"ruleId":"144","severity":1,"message":"145","line":420,"column":29,"nodeType":"146","endLine":420,"endColumn":75},{"ruleId":"144","severity":1,"message":"145","line":462,"column":25,"nodeType":"146","endLine":462,"endColumn":101},{"ruleId":"144","severity":1,"message":"145","line":491,"column":25,"nodeType":"146","endLine":491,"endColumn":82},{"ruleId":"144","severity":1,"message":"145","line":519,"column":29,"nodeType":"146","endLine":519,"endColumn":94},{"ruleId":"144","severity":1,"message":"145","line":520,"column":29,"nodeType":"146","endLine":520,"endColumn":75},{"ruleId":"144","severity":1,"message":"145","line":549,"column":25,"nodeType":"146","endLine":549,"endColumn":82},{"ruleId":"147","severity":1,"message":"148","line":90,"column":29,"nodeType":"146","endLine":90,"endColumn":104},{"ruleId":"129","severity":1,"message":"156","line":2,"column":17,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"157","line":2,"column":22,"nodeType":"131","messageId":"132","endLine":2,"endColumn":27},{"ruleId":"133","replacedBy":"158"},{"ruleId":"135","replacedBy":"159"},{"ruleId":"129","severity":1,"message":"160","line":2,"column":24,"nodeType":"131","messageId":"132","endLine":2,"endColumn":29},{"ruleId":"161","severity":1,"message":"162","line":207,"column":17,"nodeType":"163","endLine":207,"endColumn":25},"no-unused-vars","'isProd' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"'Link' is defined but never used.","'current' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dataType' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'makeStyles' is defined but never used.","'Paper' is defined but never used.","'datasetName' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'Tag' is defined but never used.","'Space' is defined but never used.",["164"],["165"],"'Badge' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]