[{"/usr/src/app/src/index.js":"1","/usr/src/app/src/reportWebVitals.js":"2","/usr/src/app/src/App.js":"3","/usr/src/app/src/components/Footer/Footer.js":"4","/usr/src/app/src/components/Header/Header.js":"5","/usr/src/app/src/containers/Prediction/Prediction.js":"6","/usr/src/app/src/components/Navigator/Navigator.js":"7","/usr/src/app/src/containers/Expriments/Expriments.js":"8","/usr/src/app/src/containers/Datasets/Datasets.js":"9","/usr/src/app/src/components/InputData/InputData.js":"10","/usr/src/app/src/components/Result/Result.js":"11","/usr/src/app/src/components/ExperimentDetail/ExperimentDetail.js":"12","/usr/src/app/src/components/ExperimentSummary/ExperimentSummary.js":"13","/usr/src/app/src/components/ExperimentCreate/ExperimentCreate.js":"14","/usr/src/app/src/components/ExperimentCompare/ExperimentCompare.js":"15","/usr/src/app/src/components/DatasetDetails/DatasetDetails.js":"16","/usr/src/app/src/components/DatasetCreate/DatasetCreate.js":"17","/usr/src/app/src/components/DatasetSummary/DatasetSummary.js":"18"},{"size":540,"mtime":1608586805763,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1608586805764,"results":"21","hashOfConfig":"20"},{"size":1810,"mtime":1608586805759,"results":"22","hashOfConfig":"20"},{"size":496,"mtime":1608586805762,"results":"23","hashOfConfig":"20"},{"size":725,"mtime":1608586805762,"results":"24","hashOfConfig":"20"},{"size":1772,"mtime":1608586805763,"results":"25","hashOfConfig":"20"},{"size":2670,"mtime":1608890277764,"results":"26","hashOfConfig":"20"},{"size":6690,"mtime":1608586805763,"results":"27","hashOfConfig":"20"},{"size":4400,"mtime":1608890249957,"results":"28","hashOfConfig":"20"},{"size":5572,"mtime":1608586805762,"results":"29","hashOfConfig":"20"},{"size":2958,"mtime":1608586805763,"results":"30","hashOfConfig":"20"},{"size":5867,"mtime":1608586805762,"results":"31","hashOfConfig":"20"},{"size":4142,"mtime":1608586805762,"results":"32","hashOfConfig":"20"},{"size":24724,"mtime":1608586805761,"results":"33","hashOfConfig":"20"},{"size":6921,"mtime":1608586805761,"results":"34","hashOfConfig":"20"},{"size":5157,"mtime":1608586805760,"results":"35","hashOfConfig":"20"},{"size":5413,"mtime":1608764761268,"results":"36","hashOfConfig":"20"},{"size":4035,"mtime":1608586805760,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11z7452",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},"/usr/src/app/src/index.js",[],["82","83"],"/usr/src/app/src/reportWebVitals.js",[],"/usr/src/app/src/App.js",[],"/usr/src/app/src/components/Footer/Footer.js",[],"/usr/src/app/src/components/Header/Header.js",[],"/usr/src/app/src/containers/Prediction/Prediction.js",[],"/usr/src/app/src/components/Navigator/Navigator.js",["84","85"],"/usr/src/app/src/containers/Expriments/Expriments.js",[],"/usr/src/app/src/containers/Datasets/Datasets.js",[],"/usr/src/app/src/components/InputData/InputData.js",["86","87","88","89","90"],"import React, { Component } from 'react';\nimport Style from './inputdata.module.css'\nimport { Select } from 'antd';\nimport { Input, Button, message } from 'antd';\nimport { Next } from 'react-bootstrap/esm/PageItem';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nexport default class InputData extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            dataType:'snp',\n            model:'',\n            inputData:'',\n            SNPsInfo:'',\n            experimentInfo:[],\n            loading:props.loading,\n        };\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        this.setState({\n            loading:nextProps.loading\n        })\n    }\n\n    componentWillMount = () => {\n        this.fetchExperimentInfo();\n    }\n\n    fetchExperimentInfo = () => {\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n          };\n        fetch(`/api/operation/retrieve_experiment_summary/?localstorage_id=${localStorage.getItem('G2PDeep')}`, requestOptions)\n        .then(response => response.text())\n        .then(result => this.getExperimentInfo(result))\n        .catch(error => console.log('error', error));\n    }\n\n    getExperimentInfo = (result) => {\n        let info = JSON.parse(result).message;\n        // console.log(dataInfo)\n        this.setState({\n            experimentInfo: info,\n        })\n    }\n    \n    onChangeDataType = (value) =>{\n        console.log(`selected ${value}`);\n        this.setState({\n            dataType:value,\n        })\n    }\n\n    onChangeModel = (value) =>{\n        console.log(`selected ${value}`);\n        this.setState({\n            model:value,\n        })\n    }\n\n    onChangeInputData = ({ target: { value } }) => {\n        this.setState({\n            inputData:value\n        })\n    };\n\n    onChangeSNPsInfo = ({ target: { value } }) => {\n        this.setState({\n            SNPsInfo:value\n        })\n    };\n\n    submit = () => {\n        if (this.state.inputData!='' && this.state.medel!='') {\n            this.props.submit(this.state.dataType, this.state.model, this.state.inputData)\n        }else{\n            message.warning(\"Invalid Input\")\n        } \n    };\n\n    render() {\n        // console.log(this.state.experimentInfo)\n        let dataType = (\n            <div>\n                <label className={Style.title}>DataType :</label>\n                <br></br>\n                <Select\n                    className={Style.selectData}\n                    showSearch\n                    placeholder=\"Select a DataType\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onChangeDataType}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    <Option value=\"jacDNA Mathylationk\">DNA Mathylation</Option>\n                    <Option value=\"SNPs\">SNPs</Option>\n                </Select>\n            </div>\n        )\n        let model = (\n            <div style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Model<span style={{color:'red'}}>*</span>:</label>\n                <br></br>\n                <Select\n                    className={Style.selectModel}\n                    showSearch\n                    placeholder=\"Select a Model\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onChangeModel}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    {\n                        this.state.experimentInfo.map(element => {\n                            // console.log(element)\n                            return <Option value={element.experiment_info_id}>{element.experiment_name}</Option>\n                        })\n                    }\n                </Select>\n            </div>\n        )\n\n        let inputData=(\n            <div style={{clear:'both',paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Input Data<span style={{color:'red'}}>*</span> :</label>\n                    <a href = '###' className = {Style.inputData_a} >example</a>\n                    {/* <a href = '###' className = {Style.inputData_a} >upload</a> */}\n                </div>\n                <TextArea\n                className={Style.inputData}\n                onChange={this.onChangeInputData}\n                placeholder=\"Iinput your data\"\n                rows={6}\n                />\n            </div>\n        )\n        let SNPsInfo=(\n            <div style={{clear:'both',paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Additional SNPs Information :</label>\n                </div>\n                <TextArea\n                className={Style.inputData}\n                onChange={this.onChangeSNPsInfo}\n                placeholder=\"Iinput your SNPsInfo\"\n                rows={6}\n                />\n            </div>\n        )\n        return (\n            <div>\n                {/* {dataType} */}\n                {model}\n                {inputData}\n                {/* {SNPsInfo} */}\n                <div style={{paddingTop:'40px'}}>\n                    <Button type=\"primary\" size={'large'} \n                       onClick = {this.submit}\n                       loading = {this.state.loading}\n                       >Submit</Button>\n                </div>\n            </div>\n        )\n    }\n}\n","/usr/src/app/src/components/Result/Result.js",["91"],"import React, { Component } from 'react'\nimport Style from './result.module.css'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { Collapse } from 'antd';\n\nconst { Panel } = Collapse;\n\nexport default class Result extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            result:props.result\n        }\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        this.setState({\n            result:nextProps.result,\n        })\n    }\n\n    render() {\n        console.log(this.state.result)\n        let options={}\n        if(this.state.result !== undefined){\n            let tableData = this.state.result.predicted_values;\n            let categories =[];\n            tableData.forEach((element, index) => {\n                let temp = \"Sample\"+(index+1);\n                categories.push(temp)\n            });\n            options = {\n                chart: {\n                    width:800,\n                    type: 'bar'\n                },\n                title: {\n                    text: 'Predicted values for given input'\n                },\n                subtitle: {\n                    text: ''\n                },\n                yAxis: {\n                min: -4,\n                title: {\n                    text: '',\n                    align: 'high'\n                },\n                labels: {\n                    overflow: 'justify'\n                }\n                    },\n                xAxis: {\n                    categories: categories,\n                    title: {\n                        text: null\n                    },\n                    labels: {\n                        step: 1\n                    }\n                },\n                series: [{\n                    name: 'Predicted values',\n                    data: tableData\n                }, ]\n            }\n        }\n        let res = (\n            <div></div>\n        )\n        if(this.state.result !== undefined){\n            res=(\n                <div style={{clear:'both',paddingTop:'30px', width:'900px'}}>\n                  \n                        <label className={Style.title}>Result</label>\n                        <Collapse defaultActiveKey={['1','2']} >\n                        <Panel header=\"Predicted values for given input\" key=\"1\">\n                        <HighchartsReact \n                            highcharts={Highcharts}\n                            options={options}\n                            />\n                        </Panel>\n                        <Panel header=\"Saliency Map\" key=\"2\">\n                        <img src={this.state.result.saliency_map_url} style={{width:'800px'}}></img>\n                        </Panel>\n                    </Collapse>\n                  \n                    \n                </div>\n            )\n        }\n        return (\n            <div className={Style.mian}>\n                {res}\n            </div>\n        )\n    }\n}\n","/usr/src/app/src/components/ExperimentDetail/ExperimentDetail.js",["92","93","94"],"import React, { Component } from 'react'\nimport { Descriptions, Badge, Empty, Spin } from 'antd';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nexport default class ExperimentDetail extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            showIndex:props.showIndex,\n            showDetails_id:props.showDetails_id,\n            experimentInfo:props.experimentInfo,\n            detail:props.detail,\n            chartOfVsData:props.chartOfVsData,\n            chartOfCurveData:props.chartOfCurveData,\n            loadDetailStatus:props.loadDetailStatus,\n        }\n    }\n\n    componentWillReceiveProps = (nextProps) => { \n        this.setState({\n            experimentInfo:nextProps.experimentInfo,\n            showIndex:nextProps.showIndex,\n            showDetails_id:nextProps.showDetails_id,\n            detail:nextProps.detail,\n            chartOfVsData:nextProps.chartOfVsData,\n            chartOfCurveData:nextProps.chartOfCurveData,\n            loadDetailStatus:nextProps.loadDetailStatus,\n        })\n    }\n\n    afterChartOfCurveCreated = (chart) => {\n        // console.log(chart)\n        this.internalChartOfCurve=chart\n    }\n\n    afterChartOfVsCreated = (chart) => {\n      // console.log(chart)\n      this.internalChartOfVs=chart\n    }\n\n    render() {\n      let chartVsOption = {\n        chart: {\n          width: 900,\n          type: 'scatter',\n          zoomType: 'xy'\n        },\n        title: {\n          text: 'True v.s. predicted quantitative traits.'\n        },\n        xAxis: {\n          title: {\n            enabled: true,\n            text: 'True quantitative traits'\n          },\n          startOnTick: true,\n          endOnTick: true,\n          showLastLabel: true\n        },\n        yAxis: {\n          title: {\n            text: 'Predicted quantitative traits'\n          }\n        },\n        legend: {\n          layout: 'vertical',\n          align: 'left',\n          verticalAlign: 'top',\n          x: 100,\n          y: 70,\n          floating: true,\n          backgroundColor: Highcharts.defaultOptions.chart.backgroundColor,\n          borderWidth: 1\n        },\n        plotOptions: {\n          scatter: {\n            marker: {\n              radius: 5,\n              states: {\n                hover: {\n                  enabled: true,\n                  lineColor: 'rgb(100,100,100)'\n                }\n              }\n            },\n            states: {\n              hover: {\n                marker: {\n                  enabled: false\n                }\n              }\n            },\n            tooltip: {\n              headerFormat: '<b>{series.name}</b><br>',\n              pointFormat: '{point.x}, {point.y}'\n            }\n          }\n        },\n        series: this.state.chartOfVsData\n      }\n      let chartOfCurveOption = {\n        chart:{\n          width:900\n        },\n        title: {\n          text: 'Learning Curve'\n        },\n        yAxis: {\n          title: {\n            text: 'Metric'\n          }\n        },\n        xAxis: {\n          title: {\n            text: 'Epochs'\n          }\n        },\n        legend: {\n          layout: 'vertical',\n          align: 'right',\n          verticalAlign: 'middle'\n        },\n        plotOptions: {\n          series: {\n            label: {\n              connectorAllowed: false\n            },\n            pointStart: 1\n          }\n        },\n  \n        series: this.state.chartOfCurveData,\n        responsive: {\n          rules: [{\n            condition: {\n              maxWidth: 500\n            },\n            chartOptions: {\n              legend: {\n                layout: 'horizontal',\n                align: 'center',\n                verticalAlign: 'bottom'\n              }\n            }\n          }]\n        }\n      }\n      console.log(this.state.loadDetailStatus)\n\n      let detailsDes = (\n          <div id ='empty' style = {{paddingTop:'50px'}}>\n              <Empty />\n          </div>\n      )\n      if(this.state.loadDetailStatus){\n        detailsDes =(\n          <Spin></Spin>\n        )\n        \n      }\n      if (!this.state.loadDetailStatus && this.state.detail.length>0) {\n          detailsDes = (\n            <div>\n              <Descriptions \n                style = {{width:'950px'}}\n                bordered\n                column={2} \n                layout=\"vertical\" \n                bordered\n              >\n                <Descriptions.Item label=\"Dataset Name\">{this.state.detail[0].dataset_name}</Descriptions.Item>\n                <Descriptions.Item label=\"Type of dataset\">SNPs</Descriptions.Item>\n                <Descriptions.Item label=\"Status\" span = {2}>\n                {this.state.detail[0].experiment_status}\n                </Descriptions.Item>\n              </Descriptions>\n              <br></br>\n              <p>Model Details:</p>\n              <br></br>\n              <img src = {this.state.detail[0].model_plot_url}\n                  style={{width:'60%'}}></img>\n                  <br></br>\n            </div>\n          )\n        }\n        return (\n            <div >\n                {detailsDes}\n                <br></br>\n                <div style={{display:this.state.detail.length>0 ? 'block':'none'}}>\n                  <p>Learning Curve:</p>\n                  <div>\n                  <HighchartsReact \n                      highcharts={Highcharts}\n                      options={chartOfCurveOption}\n                      callback={ this.afterChartOfCurveCreated }\n                  />\n                  </div>\n                  <br></br>\n                  <p>Predicted VS True:</p>\n                  <HighchartsReact \n                      highcharts={Highcharts}\n                      options={chartVsOption}\n                      callback={ this.afterChartOfVsCreated }\n                  />\n                </div>\n            </div>\n        )\n    }\n}\n","/usr/src/app/src/components/ExperimentSummary/ExperimentSummary.js",["95"],"import React, { Component } from 'react'\nimport { Table, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\n\nexport default class ExperimentSummary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedRowKeys: [], // Check here to configure the default column\n            loading: props.loading,\n            experimentInfo:props.experimentInfo,\n        }\n        this.tableColumns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n            },\n            {\n                title: 'Created Date',\n                dataIndex: 'createdDate',\n            },\n            {\n                title: 'Updated Date',\n                dataIndex: 'updatedDate',\n            },\n            {\n                title:'Status',\n                dataIndex:'status',\n            }\n        ]\n    }\n\n    // componentDidMount = () => {\n    //     this.props.history.push(\"/datasets/summary\")\n    // }\n\n    componentWillReceiveProps = (nextProps) => {\n      // console.log(nextProps.datasetsInfo)\n      this.setState({\n        experimentInfo:nextProps.experimentInfo,\n        loading:nextProps.loading\n      });\n    }\n\n    compare = () => {\n        //ajax request after empty completing\n        this.setState({\n            selectedRowKeys: [],\n            loading: true,\n        });\n        this.props.compare(this.state.selectedRowKeys)\n        // console.log(this.state.selectedRowKeys)\n    };\n    \n    onSelectChange = selectedRowKeys => {\n        if(selectedRowKeys.length<=4){\n            console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys:selectedRowKeys });\n        }else{\n            message.warning('Choose up to 4 !')\n        }\n    };\n\n    showDetails = (index, id) => {\n        // console.log(index,id)\n        this.props.showDetails(index, id);\n      }\n\n    render() {\n        const { loading, selectedRowKeys } = this.state;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n        const data_table = []\n        this.state.experimentInfo.forEach((element,index) => {\n            // success ruuning \n            if(element.experiment_status === 'SUCCESS' || element.experiment_status === 'RUNNING' || element.experiment_status === 'PENDING'){\n                data_table.push(\n                    {\n                      name: <a onClick = {() => {this.showDetails(index, element.experiment_info_id)}}><Link to=\"/experiment/detail\">{element.experiment_name}</Link></a>,\n                      description:element.description,\n                      createdDate:element.created_at,\n                      updatedDate:element.updated_at,\n                      status:element.experiment_status,\n                      key:element.experiment_info_id,\n                    }\n                  )\n            }else{\n                data_table.push(\n                    {\n                      name: element.experiment_name,\n                      description:element.description,\n                      createdDate:element.created_at,\n                      updatedDate:element.updated_at,\n                      status:element.experiment_status,\n                      key:element.experiment_info_id,\n                    }\n                  )\n            }\n        })\n        return (\n            <div id = 'experiment_summary_content' style = {{width:'850px'}}>\n                <div style={{ marginBottom: 16 }}>\n                <Button type=\"primary\" onClick={this.compare} loading={loading}>\n                    Compare\n                </Button>\n                <span style={{ marginLeft: 8 }}>\n                    {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\n                </span>\n                </div>\n                <Table rowSelection={rowSelection} columns={this.tableColumns} dataSource={data_table} bordered />\n            </div>\n        )\n    }\n}\n","/usr/src/app/src/components/ExperimentCreate/ExperimentCreate.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import React, { Component } from 'react'\nimport Style from './experimentCreate.module.css'\nimport { Select, Button, Input, message } from 'antd';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {Typography} from '@material-ui/core'\nimport csvImg from './export-csv.png'\nimport arrowInput from './arrow-input.png'\nimport cnn from './cnn.png'\nimport fcn from './fcn.png'\nimport $ from 'jquery'\nimport { withRouter } from 'react-router-dom'\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nclass ExperimentCreate extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state={\n            maxLayerNum:3,\n            leftCnnLayerNum:1,\n            rightCnnLayerNum:1,\n            fCnnLayerNum:1,\n            leftCnn:[],\n            rightCnn:[],\n            fCn:[],\n            description:'',\n            experimentName:'',\n            dataset:'',\n            datasetInfo:[],\n            learningRate:0.00001,\n            loading:false,\n        }\n    }\n\n    componentWillMount = () => {\n        this.fetchDatasetInfo();\n    }\n\n    fetchDatasetInfo = () => {\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        fetch(`/api/datasets/retrieve_dataset_info/?localstorage_id=${localStorage.getItem('G2PDeep')}`, requestOptions)\n          .then(response => response.text())\n          .then((result) => this.getDatasetInfo(result))\n          .catch(error => console.log('error', error));\n      }\n    \n    //set datasets_info as a global parameter \n    getDatasetInfo = (result) => {\n        let datasetName = []\n        let dataInfo = JSON.parse(result).message;\n        // console.log(dataInfo)\n        this.setState({\n            datasetInfo: dataInfo,\n        })\n    }\n\n    fetchToCreate = () => {\n        //get data\n        let epoch_num = 1000;\n        let batch_num = 256;\n        var left_filters_arr = new Array();\n        var left_kernel_size_arr = new Array();\n        var right_filters_arr = new Array();\n        var right_kernel_size_arr = new Array();\n        var fcn_size_arr = new Array();\n        $(\"input[name='left_filters[]']\").each(function () {\n          left_filters_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='left_kernel_size[]']\").each(function () {\n          left_kernel_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='right_filters[]']\").each(function () {\n          right_filters_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='right_kernel_size[]']\").each(function () {\n          right_kernel_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='num_fcn[]']\").each(function () {\n          fcn_size_arr.push(parseInt($(this).val()));\n        });\n        $(\"input[name='epoch_num']\").each(function () {\n            epoch_num = parseInt( $(this).val() );\n        });\n        $(\"input[name='batch_num']\").each(function () {\n            batch_num = parseInt( $(this).val() );\n        });\n        // console.log(\"----\");\n        // console.log(left_filters_arr);\n        // console.log(left_kernel_size_arr);\n        // console.log(right_filters_arr);\n        // console.log(right_kernel_size_arr);\n        // console.log(fcn_size_arr);\n        // console.log(epoch_num)\n        // console.log(\"---------------------\");\n        //fetch to create\n        if (left_filters_arr[left_filters_arr.length-1] === right_filters_arr[right_filters_arr.length-1]) {\n            this.setState({\n                loading:true\n            });\n            var myHeaders = new Headers();\n            myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n            myHeaders.append(\"Content-Type\", \"application/json\");\n            var raw = JSON.stringify(\n                {\n                    \"localstorage_id\":localStorage.getItem('G2PDeep'),\n                    \"experiment_name\":this.state.experimentName,\n                    \"dataset_info_id\":this.state.dataset,\n                    \"description\":this.state.description,\n                    \"experimental_parameters\":\n                    {\n                        \"learning_rate\":this.state.learningRate,\n                        \"epochs\":epoch_num,\n                        \"batch_size\":batch_num,\n                    },\n                    \"model_hyperparameters\":\n                    {\n                        \"left_tower_filters_list\":left_filters_arr,\n                        \"left_tower_kernel_size_list\":left_kernel_size_arr,\n                        \"right_tower_filters_list\":right_filters_arr,\n                        \"right_tower_kernel_size_list\":right_kernel_size_arr,\n                        \"central_tower_filters_list\":[10],\n                        \"central_tower_kernel_size_list\":[4],\n                        \"dnn_size_list\":fcn_size_arr,\n                    }\n                });\n            var requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n            };\n            fetch(\"/api/operation/conduct_experiment/\", requestOptions)\n            .then(response => response.text())\n            .then(result => this.checkCreate(result))\n            .catch(error => console.log('error', error));\n        }else{\n            message.warning('The number of filters in the last layers for both the left and right tower must be the same.')\n        }\n    }\n\n    checkCreate = (result) => {\n        let status = JSON.parse(result).status;\n        console.log(status)\n        if (status === 'SUCCESS' || status  === 'RUNNING' || status  === 'PEDNING') {\n            this.props.fetchExperimentInfo();\n            this.props.history.push(\"/experiment/summary\");\n            this.setState({loading:false})\n        } else {\n            message.warning(JSON.parse(result).message)\n        }\n    }\n\n    onChangeExperimentName = ({ target: { value } }) => {\n        this.setState({\n            experimentName:value\n        })\n    };\n\n    onchageDataset = (value) => {\n        console.log(`selected ${value}`);\n        this.setState({\n            dataset:value,\n        })\n    }\n\n    onchageLearningRate = (value) => {\n        this.setState({\n            learningRate:value,\n        })\n    }\n\n    onChangeDescription = ({ target: { value } }) => {\n        this.setState({\n            description:value\n        })\n    };\n\n    addLeftCnn = () =>{\n        if(this.state.leftCnnLayerNum < this.state.maxLayerNum ){\n            let temp= [...this.state.leftCnn];\n            temp.push(\n                <div>\n                    <img src={arrowInput} style={{height:'20px', marginLeft:'340px', marginBottom:'10px'}}></img>\n                    <div>\n                        <Slider\n                            name='left_filters[]'\n                            style = {{color:'#1165f1',width:'100px'}}\n                            defaultValue={5}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <Slider\n                            name='left_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <img src={cnn} style={{width:'150px', marginLeft:'50px',marginTop:'-20px'}}></img>\n                        </div>\n                </div>\n            )\n            this.setState({\n                leftCnn:temp,\n                leftCnnLayerNum:this.state.leftCnnLayerNum+1,\n            })\n        }\n    }\n\n    addRightCnn = () =>{\n        if(this.state.rightCnnLayerNum < this.state.maxLayerNum){\n            let temp= [...this.state.rightCnn];\n            temp.push(\n                <div>\n                    <img src={arrowInput} style={{height:'20px', marginLeft:'60px', marginBottom:'10px'}}></img>\n                    <div>\n                    <img src={cnn} style={{width:'150px',marginTop:'-20px'}}></img>\n                            <Slider\n                                name='right_filters[]'\n                                style = {{color:'#1165f1',width:'100px',marginLeft:'45px'}}\n                                defaultValue={5}\n                                //   getAriaValueText={valuetext}\n                                aria-labelledby=\"discrete-slider-small-steps\"\n                                min={3} max={12} step={1}\n                                valueLabelDisplay=\"on\"\n                                />\n                            <Slider\n                                name='right_kernel_size[]'\n                                style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                                defaultValue={10}\n                                //   getAriaValueText={valuetext}\n                                aria-labelledby=\"discrete-slider-small-steps\"\n                                min={4} max={30} step={1}\n                                valueLabelDisplay=\"on\"\n                                />\n                    </div>\n                </div>\n            )\n            this.setState({\n                rightCnn:temp,\n                rightCnnLayerNum:this.state.rightCnnLayerNum+1\n            })\n        }\n    }\n\n    addFCnn = () => {\n        if(this.state.fCnnLayerNum < this.state.maxLayerNum){\n            let temp = [...this.state.fCn];\n            temp.push(\n                <div>\n                    <div style={{paddingTop:'15px'}}>\n                        <Slider\n                            name='num_fcn[]'\n                            style = {{color:'#1165f1',width:'250px'}}\n                            defaultValue={1}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={1} max={512} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <img src={fcn} style={{width:'300px',marginLeft:'45px'}}></img>\n                    </div>\n                    <div style={{textAlign:'center'}}>\n                        <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                        <img src={arrowInput} style={{height:'32px'}}></img>\n                    </div>\n                </div>\n            )\n            this.setState({\n                fCn:temp,\n                fCnnLayerNum:this.state.fCnnLayerNum+1\n            })\n        }\n    }\n\n    delLeftCnn = () => {\n        let temp = [...this.state.leftCnn];\n        temp.pop();\n        this.setState({\n            leftCnn:temp,\n            leftCnnLayerNum:this.state.leftCnnLayerNum-1\n        })\n    }\n\n    delRightCnn = () => {\n        let temp = [...this.state.rightCnn];\n        temp.pop();\n        this.setState({\n            rightCnn:temp,\n            rightCnnLayerNum:this.state.rightCnnLayerNum-1\n        })\n    }\n\n    delFCn = () => {\n        let temp = [...this.state.fCn];\n        temp.pop();\n        this.setState({\n            fCn:temp,\n            fCnnLayerNum:this.state.fCnnLayerNum-1,\n        })\n    }\n\n    create = () =>{\n        if (this.state.dataset != '' && this.state.experimentName != '') {\n            this.fetchToCreate();\n            \n        }else{\n            message.warning('Invalid Input')\n        }\n    }\n\n    render() {\n        // console.log(this.state.a)\n        let experimentName = (\n            <div id = 'experimentName'>\n                <label className={Style.title}>Experiment Name<span style={{color:'red'}}>*</span> :</label>\n                <br></br>\n                <Input placeholder=\"input your dataset's name\" \n                    allowClear \n                    onChange={this.onChangeExperimentName} \n                    className = {Style.inputDatasetName} />\n            </div>\n        )\n        let dataset = (\n            <div id = 'dataset' style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Choose dataset<span style={{color:'red'}}>*</span> :</label>\n                <br></br>\n                <Select\n                    className={Style.dataType}\n                    showSearch\n                    placeholder=\"Select a Model\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onchageDataset}\n                    filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                >\n                    {\n                        this.state.datasetInfo.map((value) =>{\n                            return <Option value={value.dataset_info_id}>{value.dataset_name}</Option>\n                          })\n                    }\n                </Select>\n            </div>\n        );\n        let parameter = (\n            <div style = {{width:'850px',paddingTop:'30px'}}>\n                <label className={Style.title}>Experiment parameters :</label>\n                <br></br>\n                <label className={Style.title_small}>Epoch :</label>\n                <Slider\n                    name = 'epoch_num'\n                    style = {{color:'#1165f1',width:'900px'}}\n                    defaultValue={1000}\n                    //   getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider-small-steps\"\n                    step={200}\n                    marks\n                    min={200}\n                    max={2001}\n                    valueLabelDisplay=\"on\"\n                    />\n                <br></br>\n                <label className={Style.title_small}>Batch size :</label>\n                <Slider\n                    name='batch_num'\n                    style={{color:'rgba(239, 28, 65, 0.97)',width:'900px'}}\n                    defaultValue={256}\n                    //   getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider-small-steps\"\n                    step={32}\n                    marks\n                    min={32}\n                    max={513}\n                    valueLabelDisplay=\"on\"\n                    />\n            </div>\n        )\n        let learningRate =(\n            <div style={{paddingTop:'30px'}}>\n                <label className={Style.title}>Learning Rate<span style={{color:'red'}}>*</span> :</label>\n                <br></br>\n                <Select\n                    className={Style.dataType}\n                    showSearch\n                    placeholder=\"0.00001\"\n                    optionFilterProp=\"children\"\n                    onChange={this.onchageLearningRate}\n                >\n                  <Option value={0.00001}>0.00001</Option>\n                  <Option value={0.0001}>0.0001</Option>\n                  <Option value={0.001}>0.001</Option>\n                  <Option value={0.003}>0.003</Option>\n                  <Option value={0.01}>0.01</Option>\n                  <Option value={0.03}>0.03</Option>\n                  <Option value={0.1}>0.1</Option>\n                  <Option value={0.3}>0.3</Option>\n                  <Option value={1}>1</Option>\n                  <Option value={3}>3</Option>\n                  <Option value={10}>10</Option>\n                   \n                </Select>\n            </div>\n        )\n        let modeling = (\n            <div style = {{width:'900px',paddingTop:'30px'}}>\n                <label className={Style.title}>Hyperparameters :</label>\n                <Grid container >\n                    {/* top layer */}\n                    <Grid xs={12} style={{backgroundColor:'rgb(250, 234, 234)'}}>\n                        <div style={{textAlign:'center'}}>\n                            <img src={csvImg}></img>\n                        </div>\n                        <div style={{textAlign:'center'}}>\n                            <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                            <img src={arrowInput} style={{height:'32px'}}></img>\n                        </div>\n                    </Grid>\n                    {/* sencond layer left */}\n                    <Grid name = 'leftCNN'xs={6} style={{backgroundColor:'rgb(255, 255, 208)', padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                          <Typography variant=\"subtitle1\">Left Tower (CNN)</Typography>\n                        </div>\n                        <div>\n                          <span>Add/Delete layer (min:1, max:3)</span>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'40px',backgroundColor:'#1165f1'}}\n                              onClick={this.addLeftCnn}\n                              >Add Layer</Button>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                              onClick={this.delLeftCnn}\n                              >Del Layer</Button>\n                        </div>\n                        <div>\n                        <br></br>\n                            <pre>filters         size of flter</pre>\n                        </div>\n                        <div style={{paddingTop:'15px'}}>\n                        <Slider\n                            name='left_filters[]'\n                            style = {{color:'#1165f1',width:'100px'}}\n                            defaultValue={5}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <Slider\n                            name='left_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <img src={cnn} style={{width:'150px', marginLeft:'50px',marginTop:'-20px'}}></img>\n                        </div>\n                        {\n                            this.state.leftCnn.map(element =>{\n                                return element;\n                            })\n                        }\n                    </Grid>\n                    {/* second layer right */}\n                    <Grid xs={6} style={{backgroundColor:'rgb(227, 252, 228)',padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                          <Typography variant=\"subtitle1\">Right Tower (CNN)</Typography>\n                        </div>\n                        <div>\n                          <span>Add/Delete layer (min:1, max:3)</span>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'40px',backgroundColor:'#1165f1'}}\n                              onClick={this.addRightCnn}\n                              >Add Layer</Button>\n                          <Button type='primary' size='small' \n                              style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                              onClick={this.delRightCnn}\n                              >Del Layer</Button>\n                        </div>\n                        <div>\n                            <br></br>\n                            <pre>                       filters         size of flter</pre>\n                        </div>\n                        <div style={{paddingTop:'15px'}}>\n                        <img src={cnn} style={{width:'150px',marginTop:'-20px'}}></img>\n                        <Slider\n                            name='right_filters[]'\n                            style = {{color:'#1165f1',width:'100px',marginLeft:'45px'}}\n                            defaultValue={5}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={3} max={12} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <Slider\n                            name='right_kernel_size[]'\n                            style = {{color:'rgba(239, 28, 65, 0.97)',width:'100px',marginLeft:'30px'}}\n                            defaultValue={10}\n                            //   getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={4} max={30} step={1} \n                            valueLabelDisplay=\"on\"\n                            />\n                        </div>\n                        {\n                            this.state.rightCnn.map(element =>{\n                                return element;\n                            })\n                        }\n                    </Grid>\n                    {/* last layer */}\n                    <Grid xs={12} style={{backgroundColor:'rgb(229, 226, 250)',padding:'5px'}}>\n                        <div style={{textAlign:'center'}}>\n                            <img src={arrowInput} style={{height:'32px',marginRight:'50px'}}></img>\n                            <img src={arrowInput} style={{height:'32px'}}></img>\n                        </div>\n                        <div>\n                            <span style={{marginLeft:'100px'}}>Size</span>\n                            <span variant=\"subtitle1\" style={{marginLeft:'200px'}}>Fully connected neural network</span>\n                            <Button type='primary' size='small' \n                                style={{marginLeft:'110px',backgroundColor:'#1165f1'}}\n                                onClick={this.addFCnn}\n                                >Add Layer</Button>\n                            <Button type='primary' size='small' \n                                style={{marginLeft:'10px',backgroundColor:'#1165f1'}}\n                                onClick={this.delFCn}\n                                >Del Layer</Button>\n                        </div>\n                        {\n                            this.state.fCn.map(element => {\n                                return element;\n                            })\n                        }\n                        <div>\n                        <Slider\n                            name='num_fcn[]'\n                            style = {{color:'#1165f1',width:'250px'}}\n                            defaultValue={1}\n                            value={1}\n                            aria-labelledby=\"discrete-slider-small-steps\"\n                            min={1} max={512} step={1}\n                            valueLabelDisplay=\"on\"\n                            />\n                        <img src={fcn} style={{width:'300px',marginLeft:'45px'}}></img>\n                        </div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n\n        let Description=(\n            <div style={{paddingTop:'30px'}}>\n                <div className={Style.title}>\n                    <label >Description :</label>\n                </div>\n                <TextArea\n                    className={Style.description}\n                    onChange={this.onChangeDescription}\n                    placeholder=\"Iinput your data\"\n                    autoSize={{ minRows: 3}}\n                />\n            </div>\n        )\n        return (\n            <div>\n                {experimentName}\n                <br></br>\n                {dataset}\n                <br></br>\n                {learningRate}\n                <br></br>\n                {Description}\n                <br></br>\n                {parameter}\n                <br></br>\n                {modeling}\n                <Button type=\"primary\" size='large'\n                style ={{marginTop:'30px'}}\n                loading = {this.state.loading}\n                onClick={this.create}>Create</Button>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ExperimentCreate)\n","/usr/src/app/src/components/ExperimentCompare/ExperimentCompare.js",["121","122"],"import React, { Component } from 'react'\nimport { Table, Tag, Space, Empty } from 'antd';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Style from './experimentCompare.module.css'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n\nclass ExperimentCompare extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            compareInfo:props.compareInfo,\n            loading:props.loading,\n            compareChartOfdata:props.compareChartOfdata,\n        }\n        this.tableColumns = [\n            {\n                title: 'Experoment Name',\n                width: 160,\n                dataIndex: 'properties',\n                key: 'name',\n                fixed: 'left',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n                key:'description',\n            },\n            {\n                title: 'Dataset name',\n                dataIndex: 'dataset_name',\n                key:'dataset_name'\n            },\n            {\n                title: 'Mean Absolute Error(train metric)',\n                dataIndex: 'MEAN_ABSOLUTE_ERROR_train',\n                key:'MEAN_ABSOLUTE_ERROR_train'\n            },\n            {\n                title:'Mean Squared Error(train metric)',\n                dataIndex:'MEAN_SQUARED_ERROR_train',\n                key:'MEAN_SQUARED_ERROR_train'\n            },\n            {\n                title:'Person Correlation Coefficient(train metric)',\n                dataIndex:'PEARSON_CORRELATION_COEFFICIENT_train',\n                key:'PEARSON_CORRELATION_COEFFICIENT_train'\n            },\n            {\n                title:'Person Correlation Coefficient(valid metric)',\n                dataIndex:'PEARSON_CORRELATION_COEFFICIENT_valid',\n                key:'PEARSON_CORRELATION_COEFFICIENT_valid'\n            },\n            {\n                title:'Mean Absolute Error(valid metric)',\n                dataIndex:'MEAN_ABSOLUTE_ERROR_valid',\n                key:'MEAN_ABSOLUTE_ERROR_valid'\n            },\n            {\n                title:'Mean Squared Error(valid metric)',\n                dataIndex:'MEAN_SQUARED_ERROR_valid',\n                key:'MEAN_SQUARED_ERROR_valid'\n            },\n            {\n                title:'Loss',\n                dataIndex:'loss',\n                key:'loss'\n            },\n            {\n                title:'Epochs',\n                dataIndex:'epochs',\n                key:'epochs'\n            },\n            {\n                title:'Metrics',\n                dataIndex:'metrics',\n                key:'metrics'\n            },\n            {\n                title:'Optimizer',\n                dataIndex:'optimizer',\n                key:'optimizer'\n            },\n            {\n                title:'Batch Size',\n                dataIndex:'batch_size',\n                key:'batch_size'\n            },\n            {\n                title:'Learning Rate',\n                dataIndex:'learning_rate',\n                key:'learning_rate'\n            },\n        ]\n    }\n\n    componentWillReceiveProps = (nextProps) => {\n        // console.log(nextProps.compareInfo)\n        this.setState({\n            compareInfo:nextProps.compareInfo,\n            loading:nextProps.loading,\n            compareChartOfdata:nextProps.compareChartOfdata\n        })\n    }\n\n    afterChartCreated=(chart)=> {\n        // console.log(chart)\n        this.internalChart=chart\n    }\n\n    render() {\n        let compareData =[]\n        let chartOption = {\n          chart: {\n            width: 900\n          },\n          title: {\n            text: ''\n          },\n          yAxis: {\n            title: {\n              text: 'Metric/Loss'\n            }\n          },\n          xAxis: {\n            title: {\n              text: 'Epochs'\n            }\n          },\n          legend: {\n            layout: 'vertical',\n            align: 'right',\n            verticalAlign: 'middle'\n          },\n          plotOptions: {\n            series: {\n              label: {\n                connectorAllowed: false\n              },\n              pointStart: 1\n            }\n          },\n          series: this.state.compareChartOfdata,\n          responsive: {\n            rules: [{\n              condition: {\n                maxWidth: 500\n              },\n              chartOptions: {\n                legend: {\n                  layout: 'horizontal',\n                  align: 'center',\n                  verticalAlign: 'bottom'\n                }\n              }\n            }]\n          }\n        }\n        let compareTable = (\n            <div id ='empty' style = {{paddingTop:'50px'}}>\n                <Empty />\n            </div>\n        )\n        if(this.state.compareInfo.length > 0){\n            this.state.compareInfo.forEach((element, index) => {\n                compareData.push(\n                    {\n                        key:index,\n                        properties:element.experiment_name,\n                        dataset_name:element.dataset_name,\n                        MEAN_ABSOLUTE_ERROR_train:element.train_metric.MEAN_ABSOLUTE_ERROR,\n                        MEAN_SQUARED_ERROR_train:element.train_metric.MEAN_SQUARED_ERROR,\n                        PEARSON_CORRELATION_COEFFICIENT_train:element.train_metric.PEARSON_CORRELATION_COEFFICIENT,\n                        MEAN_ABSOLUTE_ERROR_valid:element.valid_metric.MEAN_ABSOLUTE_ERROR,\n                        MEAN_SQUARED_ERROR_valid:element.valid_metric.MEAN_SQUARED_ERROR,\n                        PEARSON_CORRELATION_COEFFICIENT_valid:element.valid_metric.PEARSON_CORRELATION_COEFFICIENT,\n                        loss:element.experimental_parameters.loss,\n                        epochs:element.experimental_parameters.epochs,\n                        metrics:element.experimental_parameters.metrics,\n                        optimizer:element.experimental_parameters.optimizer,\n                        batch_size:element.experimental_parameters.batch_size,\n                        learning_rate:element.experimental_parameters.learning_rate,\n                    }\n                )\n            });\n            compareTable =(\n                <Table columns={this.tableColumns} dataSource={compareData} scroll={{ x: 2300 }} />\n            ) \n        }\n        return (\n            <div>\n                 <label className={Style.title}>Summary of experiments: </label>\n                 {compareTable}\n                <br></br>\n                <label className={Style.title} style={{display:this.state.compareInfo.length>0 ? 'block':'none'}}>Observation Chart:</label>\n                <HighchartsReact \n                    // style ={{width:'900px'}}\n                    highcharts={Highcharts}\n                    options={chartOption}\n                    callback={ this.afterChartCreated }\n                />\n            </div>\n        )\n    }\n}\n\nexport default ExperimentCompare\n","/usr/src/app/src/components/DatasetDetails/DatasetDetails.js",[],"/usr/src/app/src/components/DatasetCreate/DatasetCreate.js",["123"],"/usr/src/app/src/components/DatasetSummary/DatasetSummary.js",["124"],"import React, { Component } from 'react'\nimport { Table, Input, Button, Space } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\n\nexport default class Summary extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchText: '',\n      searchedColumn: '',\n      datasetsInfo:props.datasetsInfo,\n    };\n    this.columns_table = [\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: '10%',\n      },\n      {\n        title: 'Datasets\\' Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n      },\n      {\n        title: 'Number of samples',\n        dataIndex: 'NumberOfSamples',\n        key: 'NumberOfSamples',\n        width: '30%',\n      },\n      {\n        title: 'Create Date',\n        dataIndex: 'date',\n        key: 'date',\n        width: '30%',\n      },\n    ];\n  }\n    \n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n        : '',\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select(), 100);\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n  \n  componentWillReceiveProps = (nextProps) => {\n    // console.log(nextProps.datasetsInfo)\n    this.setState({\n      datasetsInfo:nextProps.datasetsInfo,\n    });\n  }\n\n  showDetails = (index, datasetId) => {\n    // console.log(this.state.datasetsInfo[index])\n    this.props.showDetails(index, datasetId);\n  }\n\n  render() {\n    const data_table = []\n    this.state.datasetsInfo.forEach((element,index) => {\n      data_table.push(\n        {\n          id: index+1,\n          key:element.dataset_info_id,\n          name: <a onClick = {() => {this.showDetails(index, element.dataset_info_id)}}><Link to=\"/datasets/details\">{element.dataset_name}</Link></a>,\n          NumberOfSamples: element.num_samples,\n          date: element.created_at,\n        }\n      )\n    })\n      \n    return (\n        <div id = 'dataTable' style = {{width:'850px'}}>\n            <Table \n            columns={this.columns_table} dataSource={data_table} \n            bordered/>\n        </div>\n    )\n  }\n}\n",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":14},{"ruleId":"129","severity":1,"message":"133","line":31,"column":13,"nodeType":"131","messageId":"132","endLine":31,"endColumn":20},{"ruleId":"129","severity":1,"message":"134","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":79,"column":33,"nodeType":"137","messageId":"138","endLine":79,"endColumn":35},{"ruleId":"135","severity":1,"message":"136","line":79,"column":57,"nodeType":"137","messageId":"138","endLine":79,"endColumn":59},{"ruleId":"129","severity":1,"message":"139","line":88,"column":13,"nodeType":"131","messageId":"132","endLine":88,"endColumn":21},{"ruleId":"129","severity":1,"message":"140","line":146,"column":13,"nodeType":"131","messageId":"132","endLine":146,"endColumn":21},{"ruleId":"141","severity":1,"message":"142","line":85,"column":25,"nodeType":"143","endLine":85,"endColumn":95},{"ruleId":"129","severity":1,"message":"144","line":2,"column":24,"nodeType":"131","messageId":"132","endLine":2,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":170,"column":17,"nodeType":"147","endLine":170,"endColumn":25},{"ruleId":"141","severity":1,"message":"142","line":181,"column":15,"nodeType":"143","endLine":182,"endColumn":41},{"ruleId":"148","severity":1,"message":"149","line":86,"column":29,"nodeType":"143","endLine":86,"endColumn":104},{"ruleId":"129","severity":1,"message":"150","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":20},{"ruleId":"129","severity":1,"message":"151","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":13},{"ruleId":"129","severity":1,"message":"152","line":57,"column":13,"nodeType":"131","messageId":"132","endLine":57,"endColumn":24},{"ruleId":"153","severity":1,"message":"154","line":69,"column":32,"nodeType":"155","messageId":"156","endLine":69,"endColumn":43},{"ruleId":"153","severity":1,"message":"154","line":70,"column":36,"nodeType":"155","messageId":"156","endLine":70,"endColumn":47},{"ruleId":"153","severity":1,"message":"154","line":71,"column":33,"nodeType":"155","messageId":"156","endLine":71,"endColumn":44},{"ruleId":"153","severity":1,"message":"154","line":72,"column":37,"nodeType":"155","messageId":"156","endLine":72,"endColumn":48},{"ruleId":"153","severity":1,"message":"154","line":73,"column":28,"nodeType":"155","messageId":"156","endLine":73,"endColumn":39},{"ruleId":"141","severity":1,"message":"142","line":191,"column":21,"nodeType":"143","endLine":191,"endColumn":108},{"ruleId":"141","severity":1,"message":"142","line":211,"column":25,"nodeType":"143","endLine":211,"endColumn":101},{"ruleId":"141","severity":1,"message":"142","line":227,"column":21,"nodeType":"143","endLine":227,"endColumn":107},{"ruleId":"141","severity":1,"message":"142","line":229,"column":21,"nodeType":"143","endLine":229,"endColumn":78},{"ruleId":"141","severity":1,"message":"142","line":273,"column":25,"nodeType":"143","endLine":273,"endColumn":82},{"ruleId":"141","severity":1,"message":"142","line":276,"column":25,"nodeType":"143","endLine":276,"endColumn":90},{"ruleId":"141","severity":1,"message":"142","line":277,"column":25,"nodeType":"143","endLine":277,"endColumn":71},{"ruleId":"135","severity":1,"message":"136","line":316,"column":32,"nodeType":"137","messageId":"138","endLine":316,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":316,"column":67,"nodeType":"137","messageId":"138","endLine":316,"endColumn":69},{"ruleId":"141","severity":1,"message":"142","line":424,"column":29,"nodeType":"143","endLine":424,"endColumn":47},{"ruleId":"141","severity":1,"message":"142","line":427,"column":29,"nodeType":"143","endLine":427,"endColumn":94},{"ruleId":"141","severity":1,"message":"142","line":428,"column":29,"nodeType":"143","endLine":428,"endColumn":75},{"ruleId":"141","severity":1,"message":"142","line":470,"column":25,"nodeType":"143","endLine":470,"endColumn":101},{"ruleId":"141","severity":1,"message":"142","line":499,"column":25,"nodeType":"143","endLine":499,"endColumn":82},{"ruleId":"141","severity":1,"message":"142","line":527,"column":29,"nodeType":"143","endLine":527,"endColumn":94},{"ruleId":"141","severity":1,"message":"142","line":528,"column":29,"nodeType":"143","endLine":528,"endColumn":75},{"ruleId":"141","severity":1,"message":"142","line":557,"column":25,"nodeType":"143","endLine":557,"endColumn":82},{"ruleId":"129","severity":1,"message":"157","line":2,"column":17,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"158","line":2,"column":22,"nodeType":"131","messageId":"132","endLine":2,"endColumn":27},{"ruleId":"148","severity":1,"message":"149","line":151,"column":21,"nodeType":"143","endLine":151,"endColumn":82},{"ruleId":"148","severity":1,"message":"149","line":128,"column":17,"nodeType":"143","endLine":128,"endColumn":89},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'current' is assigned a value but never used.","'Next' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dataType' is assigned a value but never used.","'SNPsInfo' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Badge' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'makeStyles' is defined but never used.","'Paper' is defined but never used.","'datasetName' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'Tag' is defined but never used.","'Space' is defined but never used.","no-global-assign","no-unsafe-negation"]